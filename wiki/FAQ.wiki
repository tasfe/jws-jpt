#labels Featured,Phase-Deploy
= JWS-JPT FAQ =
----

== 项目如何由来？ ==
　　公司初创，资源有限，一小兄弟文科出身，只上过半年软件培训班，需要学习的东西太多，项目进度不允许。于是按约定写程序，小兄弟只写纯html，其他工作我来做。由于html中完全没有服务端内容，故较容易上手，为了衔接前后台逐渐形成了jws-jpt雏形。

== 这个项目能做什么？ ==
　　jws是一个开发环境。通过一些脚本和一些默认约定及配置，将WEB项目的编码、编译、打包、测试、调试简洁化，IDE用的是eclipse，但只用最核心的代码编辑等(JDT)功能，避免了由于安装大量插件拖慢eclipse，空占系统内存。

　　jws是一个即拷即用的绿色环境。内嵌了jdk、ant、maven、eclipse，不用担心因为环境变量和别的系统冲突而导致莫名其妙的错误。默认集成了svn、maven的eclipse插件，由于eclipse只使用了platform和JDT，没有别的插件，CVS插件也不包括，当然CVS还是很常用的，你可以单独加进来。目前只支持WIN32环境。

　　jpt是从实际项目中抽出来的一个针对maven的项目模板，目的是将web开发过程细化为用“*纯静态*页面实现表现层”、“Java类实现业务逻辑”、“SQL语句实现数据存取”。三步之间没有直接的耦合，只是通过命名约定关联起来。通过默认的通配配置和spring动态注入实现基于约定的零配置。零配置不是不能配置，而是默认配置和约定可以适用几乎所有情形，非常特殊的可以单独配置。

　　jpt将Web开发中表现层完全剥离出来成为客户端，单独测试、单独演进。服务端逻辑完全独立于HTTP，即使没做过Web开发的程序员也可以轻松实现。数据库操作则完全SQL化。这样开发过程将变成这样：

 * 销售接单子；

 * 系统分析员简单分析下需求初步确定数据结构；

 * 页面设计者使用jws从数据结构生成初始项目并带有默认的crud功能；

 * 页面设计者在系统分析员或项目经理指导下与美工配合基于jpt设计页面，形成Demo界面，与客户沟通重复迭代此步；

 * 客户确认需求；

 * 页面设计者与美工配合进一步美化界面（*注意：此时的页面代码基本就是系统最终的客户端代码，可能会稍有变化的是数据字段的命名*），同时系统分析员与其他开发人员根据界面功能设计功能，根据Demo的模拟数据设计数据库；

 * 程序员开始实现功能（*注意：此时的代码都是纯逻辑的，程序员可以不熟悉html、css、javascript等客户端技术，而且熟悉sql的可以专门负责sql实现*），测试组开始做测试用例，客服组开始编写用户手册，系统分析员、页面设计者和美工开始参与其他项目；

 * 核心功能实现后，提交用户确认，进一步迭代需求。

== subversion下载报错怎么办？ ==
　　如果使用者在WindowsXP操作系统下，在用eclipse插件或者TortoiseSVN客户端下载源代码时，可能会出现如下错误：

　　RA layer request failed

　　svn: REPORT request failed on '/work/!svn/vcc/default'

　　svn: REPORT of '/work/!svn/vcc/default': Could not read response body:

　　改成https连接方式就可以避免了。^_^

== 我下载源代码后，在执行第6步时，出现Searching repository for plugin with prefix:'archetype'问题，是什么原因？ ==
　　由于源码中没有包含依赖的jar库，需要从远程仓库下载，此时如果防火墙阻止了_<JWS_HOME>_/tools/jdk/bin/java.exe，就会报此错误。